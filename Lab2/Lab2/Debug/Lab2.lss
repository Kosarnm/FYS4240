
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  00000be8  00000c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802004  00802004  00000c80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037bb  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002966  00000000  00000000  000045b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b30  00000000  00000000  00006f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00007a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002313  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d6  00000000  00000000  0000a133  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000a909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
   4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
   8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
   c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  10:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  18:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  1c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  20:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  24:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  28:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  30:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  38:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  3c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  40:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  44:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  48:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  4c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  50:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  58:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  5c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  68:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  6c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  70:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  74:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  7c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  80:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  84:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  8c:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_35>
  90:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  94:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  98:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  9c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  ac:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  b0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  b4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  b8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  bc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  c0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  c4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  c8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  cc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  d0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  d4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  d8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  dc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  e0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  e4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  e8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  ec:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  f0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  f4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  f8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  fc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 100:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 104:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 108:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 10c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 110:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 114:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 118:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 11c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 120:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 124:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 128:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 12c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 130:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 134:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 138:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 13c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
 140:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>

00000144 <__trampolines_start>:
 144:	0c 94 06 04 	jmp	0x80c	; 0x80c <lcd_callback_lab2>

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	df e3       	ldi	r29, 0x3F	; 63
 152:	de bf       	out	0x3e, r29	; 62
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	0c bf       	out	0x3c, r16	; 60

00000158 <__do_copy_data>:
 158:	10 e2       	ldi	r17, 0x20	; 32
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	b0 e2       	ldi	r27, 0x20	; 32
 15e:	e8 ee       	ldi	r30, 0xE8	; 232
 160:	fb e0       	ldi	r31, 0x0B	; 11
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	0b bf       	out	0x3b, r16	; 59
 166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
 168:	07 90       	elpm	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	a4 30       	cpi	r26, 0x04	; 4
 16e:	b1 07       	cpc	r27, r17
 170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
 172:	20 e2       	ldi	r18, 0x20	; 32
 174:	a4 e0       	ldi	r26, 0x04	; 4
 176:	b0 e2       	ldi	r27, 0x20	; 32
 178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
 17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
 17c:	a6 30       	cpi	r26, 0x06	; 6
 17e:	b2 07       	cpc	r27, r18
 180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
 182:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
 186:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <_exit>

0000018a <__bad_interrupt>:
 18a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018e <port_dir_out>:
		_delay_ms(1000);
		
		
		
		/* remember delay */
	}
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <port_dir_out+0x6>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	6b 83       	std	Y+3, r22	; 0x03
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	9a 81       	ldd	r25, Y+2	; 0x02
 1a2:	2b 81       	ldd	r18, Y+3	; 0x03
 1a4:	fc 01       	movw	r30, r24
 1a6:	21 83       	std	Z+1, r18	; 0x01
 1a8:	00 00       	nop
 1aa:	23 96       	adiw	r28, 0x03	; 3
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <port_dir_in>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <port_dir_in+0x6>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	6b 83       	std	Y+3, r22	; 0x03
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	2b 81       	ldd	r18, Y+3	; 0x03
 1cc:	fc 01       	movw	r30, r24
 1ce:	22 83       	std	Z+2, r18	; 0x02
 1d0:	00 00       	nop
 1d2:	23 96       	adiw	r28, 0x03	; 3
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <write_port_value>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <write_port_value+0x6>
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	6b 83       	std	Y+3, r22	; 0x03
 1f0:	4c 83       	std	Y+4, r20	; 0x04
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	2c 81       	ldd	r18, Y+4	; 0x04
 1f8:	fc 01       	movw	r30, r24
 1fa:	25 83       	std	Z+5, r18	; 0x05
 1fc:	9b 81       	ldd	r25, Y+3	; 0x03
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	29 2f       	mov	r18, r25
 202:	28 23       	and	r18, r24
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	fc 01       	movw	r30, r24
 20a:	26 83       	std	Z+6, r18	; 0x06
 20c:	00 00       	nop
 20e:	24 96       	adiw	r28, 0x04	; 4
 210:	cd bf       	out	0x3d, r28	; 61
 212:	de bf       	out	0x3e, r29	; 62
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <read_port_value>:
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	1f 92       	push	r1
 220:	1f 92       	push	r1
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	fc 01       	movw	r30, r24
 230:	80 85       	ldd	r24, Z+8	; 0x08
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <CCPWrite>:
 23c:	0f 93       	push	r16
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <CCPWrite+0x8>
 244:	00 d0       	rcall	.+0      	; 0x246 <CCPWrite+0xa>
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	8c 83       	std	Y+4, r24	; 0x04
 24c:	9d 83       	std	Y+5, r25	; 0x05
 24e:	6e 83       	std	Y+6, r22	; 0x06
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	80 81       	ld	r24, Z
 258:	8b 83       	std	Y+3, r24	; 0x03
 25a:	f8 94       	cli
 25c:	8c 81       	ldd	r24, Y+4	; 0x04
 25e:	9d 81       	ldd	r25, Y+5	; 0x05
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	9a 83       	std	Y+2, r25	; 0x02
 264:	8b e3       	ldi	r24, 0x3B	; 59
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	10 82       	st	Z, r1
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	2e 81       	ldd	r18, Y+6	; 0x06
 272:	fc 01       	movw	r30, r24
 274:	08 ed       	ldi	r16, 0xD8	; 216
 276:	04 bf       	out	0x34, r16	; 52
 278:	20 83       	st	Z, r18
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	2b 81       	ldd	r18, Y+3	; 0x03
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	00 00       	nop
 286:	26 96       	adiw	r28, 0x06	; 6
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <init_32M_clock>:
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	80 e5       	ldi	r24, 0x50	; 80
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	20 e5       	ldi	r18, 0x50	; 80
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	22 60       	ori	r18, 0x02	; 2
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	80 e5       	ldi	r24, 0x50	; 80
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	82 70       	andi	r24, 0x02	; 2
 2bc:	99 27       	eor	r25, r25
 2be:	89 2b       	or	r24, r25
 2c0:	b1 f3       	breq	.-20     	; 0x2ae <init_32M_clock+0x1a>
 2c2:	80 e4       	ldi	r24, 0x40	; 64
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	88 7f       	andi	r24, 0xF8	; 248
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	68 2f       	mov	r22, r24
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <CCPWrite>
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	fc 01       	movw	r30, r24
 2e0:	23 83       	std	Z+3, r18	; 0x03
 2e2:	00 00       	nop
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <put_on_leds>:
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	1f 92       	push	r1
 2f0:	1f 92       	push	r1
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	8a 83       	std	Y+2, r24	; 0x02
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	88 2f       	mov	r24, r24
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	82 95       	swap	r24
 300:	92 95       	swap	r25
 302:	90 7f       	andi	r25, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	98 27       	eor	r25, r24
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	80 95       	com	r24
 310:	82 95       	swap	r24
 312:	80 7f       	andi	r24, 0xF0	; 240
 314:	40 ef       	ldi	r20, 0xF0	; 240
 316:	68 2f       	mov	r22, r24
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	96 e0       	ldi	r25, 0x06	; 6
 31c:	0e 94 ef 00 	call	0x1de	; 0x1de <write_port_value>
 320:	00 00       	nop
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <getButtonInput>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	0e 94 0d 01 	call	0x21a	; 0x21a <read_port_value>
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <init_buttons>:
}

void init_buttons(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize configuration of buttons */
	port_dir_in(&BUTTON_PORT, BUTTON_PORT_MASK);
 34c:	6f e0       	ldi	r22, 0x0F	; 15
 34e:	80 e8       	ldi	r24, 0x80	; 128
 350:	96 e0       	ldi	r25, 0x06	; 6
 352:	0e 94 db 00 	call	0x1b6	; 0x1b6 <port_dir_in>
	
	//using the feature of the multi pin configuration to configure bits [3:0] for pull up
	PORTCFG.MPCMASK = 0b00001111;
 356:	80 eb       	ldi	r24, 0xB0	; 176
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	2f e0       	ldi	r18, 0x0F	; 15
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
	
	//witing to any one of the pin control register will configure for all the pinc ses in MCPMASK
	PORTE.PIN0CTRL |= PORT_OPC_PULLUP_gc;
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	20 e8       	ldi	r18, 0x80	; 128
 366:	36 e0       	ldi	r19, 0x06	; 6
 368:	f9 01       	movw	r30, r18
 36a:	20 89       	ldd	r18, Z+16	; 0x10
 36c:	28 61       	ori	r18, 0x18	; 24
 36e:	fc 01       	movw	r30, r24
 370:	20 8b       	std	Z+16, r18	; 0x10

	
}
 372:	00 00       	nop
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <init_leds>:
/* initializes the led by setting corresponding bits as output
 *	
 */
void init_leds(void)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
	/* Initialize configuration of LEDs */
	port_dir_out(&LED_PORT , LED_PORT_MASK);
 382:	60 ef       	ldi	r22, 0xF0	; 240
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	0e 94 c7 00 	call	0x18e	; 0x18e <port_dir_out>
	
	
}
 38c:	00 00       	nop
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <init_buttons_and_leds>:

/* initializes the buttons by setting corresponding bits as input
 *	
 */
void init_buttons_and_leds(void)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
	init_buttons();
 39c:	0e 94 a2 01 	call	0x344	; 0x344 <init_buttons>
	init_leds();
 3a0:	0e 94 bd 01 	call	0x37a	; 0x37a <init_leds>
 3a4:	00 00       	nop
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <lcd_write_14seg>:

void lcd_write_char_pos(const uint8_t data, uint8_t pos) 
{
	/**/
	lcd_write_14seg(pos,data);
}
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	1f 92       	push	r1
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	6a 83       	std	Y+2, r22	; 0x02
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	87 30       	cpi	r24, 0x07	; 7
 3c0:	a0 f4       	brcc	.+40     	; 0x3ea <lcd_write_14seg+0x3e>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	9d e0       	ldi	r25, 0x0D	; 13
 3c6:	29 81       	ldd	r18, Y+1	; 0x01
 3c8:	22 2f       	mov	r18, r18
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	49 e0       	ldi	r20, 0x09	; 9
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	ba 01       	movw	r22, r20
 3d2:	62 1b       	sub	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	9b 01       	movw	r18, r22
 3d8:	22 0f       	add	r18, r18
 3da:	22 0f       	add	r18, r18
 3dc:	2c 73       	andi	r18, 0x3C	; 60
 3de:	20 68       	ori	r18, 0x80	; 128
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 87       	std	Z+8, r18	; 0x08
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd_write_char>
 3ea:	00 00       	nop
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <main>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	2f 97       	sbiw	r28, 0x0f	; 15
 400:	cd bf       	out	0x3d, r28	; 61
 402:	de bf       	out	0x3e, r29	; 62
 404:	0e 94 4a 01 	call	0x294	; 0x294 <init_32M_clock>
 408:	67 e0       	ldi	r22, 0x07	; 7
 40a:	82 ea       	ldi	r24, 0xA2	; 162
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 1e 01 	call	0x23c	; 0x23c <CCPWrite>
 412:	0e 94 ca 01 	call	0x394	; 0x394 <init_buttons_and_leds>
 416:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <init_lcd>
 41a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <init_lcd_interrupts>
 41e:	78 94       	sei
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	9d e0       	ldi	r25, 0x0D	; 13
 424:	2c e8       	ldi	r18, 0x8C	; 140
 426:	fc 01       	movw	r30, r24
 428:	20 87       	std	Z+8, r18	; 0x08
 42a:	85 e5       	ldi	r24, 0x55	; 85
 42c:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd_write_char>
 430:	89 e4       	ldi	r24, 0x49	; 73
 432:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd_write_char>
 436:	8f e4       	ldi	r24, 0x4F	; 79
 438:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd_write_char>
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 48 03 	call	0x690	; 0x690 <lcd_set_blink>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 23 03 	call	0x646	; 0x646 <lcd_enable_blink>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e8       	ldi	r25, 0x80	; 128
 44e:	ab e3       	ldi	r26, 0x3B	; 59
 450:	b5 e4       	ldi	r27, 0x45	; 69
 452:	8a 83       	std	Y+2, r24	; 0x02
 454:	9b 83       	std	Y+3, r25	; 0x03
 456:	ac 83       	std	Y+4, r26	; 0x04
 458:	bd 83       	std	Y+5, r27	; 0x05
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	4a ef       	ldi	r20, 0xFA	; 250
 460:	55 e4       	ldi	r21, 0x45	; 69
 462:	6a 81       	ldd	r22, Y+2	; 0x02
 464:	7b 81       	ldd	r23, Y+3	; 0x03
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	9d 81       	ldd	r25, Y+5	; 0x05
 46a:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 46e:	dc 01       	movw	r26, r24
 470:	cb 01       	movw	r24, r22
 472:	8e 83       	std	Y+6, r24	; 0x06
 474:	9f 83       	std	Y+7, r25	; 0x07
 476:	a8 87       	std	Y+8, r26	; 0x08
 478:	b9 87       	std	Y+9, r27	; 0x09
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 e8       	ldi	r20, 0x80	; 128
 480:	5f e3       	ldi	r21, 0x3F	; 63
 482:	6e 81       	ldd	r22, Y+6	; 0x06
 484:	7f 81       	ldd	r23, Y+7	; 0x07
 486:	88 85       	ldd	r24, Y+8	; 0x08
 488:	99 85       	ldd	r25, Y+9	; 0x09
 48a:	0e 94 82 04 	call	0x904	; 0x904 <__cmpsf2>
 48e:	88 23       	and	r24, r24
 490:	2c f4       	brge	.+10     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	8a 87       	std	Y+10, r24	; 0x0a
 498:	9b 87       	std	Y+11, r25	; 0x0b
 49a:	3f c0       	rjmp	.+126    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	3f ef       	ldi	r19, 0xFF	; 255
 4a0:	4f e7       	ldi	r20, 0x7F	; 127
 4a2:	57 e4       	ldi	r21, 0x47	; 71
 4a4:	6e 81       	ldd	r22, Y+6	; 0x06
 4a6:	7f 81       	ldd	r23, Y+7	; 0x07
 4a8:	88 85       	ldd	r24, Y+8	; 0x08
 4aa:	99 85       	ldd	r25, Y+9	; 0x09
 4ac:	0e 94 03 05 	call	0xa06	; 0xa06 <__gesf2>
 4b0:	18 16       	cp	r1, r24
 4b2:	4c f5       	brge	.+82     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	40 e2       	ldi	r20, 0x20	; 32
 4ba:	51 e4       	ldi	r21, 0x41	; 65
 4bc:	6a 81       	ldd	r22, Y+2	; 0x02
 4be:	7b 81       	ldd	r23, Y+3	; 0x03
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	9d 81       	ldd	r25, Y+5	; 0x05
 4c4:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 4c8:	dc 01       	movw	r26, r24
 4ca:	cb 01       	movw	r24, r22
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	0e 94 87 04 	call	0x90e	; 0x90e <__fixunssfsi>
 4d4:	dc 01       	movw	r26, r24
 4d6:	cb 01       	movw	r24, r22
 4d8:	8a 87       	std	Y+10, r24	; 0x0a
 4da:	9b 87       	std	Y+11, r25	; 0x0b
 4dc:	0f c0       	rjmp	.+30     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	8c 87       	std	Y+12, r24	; 0x0c
 4e4:	9d 87       	std	Y+13, r25	; 0x0d
 4e6:	8c 85       	ldd	r24, Y+12	; 0x0c
 4e8:	9d 85       	ldd	r25, Y+13	; 0x0d
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ee:	8c 87       	std	Y+12, r24	; 0x0c
 4f0:	9d 87       	std	Y+13, r25	; 0x0d
 4f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 4f4:	9b 85       	ldd	r25, Y+11	; 0x0b
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	8a 87       	std	Y+10, r24	; 0x0a
 4fa:	9b 87       	std	Y+11, r25	; 0x0b
 4fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 4fe:	9b 85       	ldd	r25, Y+11	; 0x0b
 500:	89 2b       	or	r24, r25
 502:	69 f7       	brne	.-38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 504:	14 c0       	rjmp	.+40     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 506:	6e 81       	ldd	r22, Y+6	; 0x06
 508:	7f 81       	ldd	r23, Y+7	; 0x07
 50a:	88 85       	ldd	r24, Y+8	; 0x08
 50c:	99 85       	ldd	r25, Y+9	; 0x09
 50e:	0e 94 87 04 	call	0x90e	; 0x90e <__fixunssfsi>
 512:	dc 01       	movw	r26, r24
 514:	cb 01       	movw	r24, r22
 516:	8a 87       	std	Y+10, r24	; 0x0a
 518:	9b 87       	std	Y+11, r25	; 0x0b
 51a:	8a 85       	ldd	r24, Y+10	; 0x0a
 51c:	9b 85       	ldd	r25, Y+11	; 0x0b
 51e:	8e 87       	std	Y+14, r24	; 0x0e
 520:	9f 87       	std	Y+15, r25	; 0x0f
 522:	8e 85       	ldd	r24, Y+14	; 0x0e
 524:	9f 85       	ldd	r25, Y+15	; 0x0f
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 52a:	8e 87       	std	Y+14, r24	; 0x0e
 52c:	9f 87       	std	Y+15, r25	; 0x0f
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 23 03 	call	0x646	; 0x646 <lcd_enable_blink>
 536:	66 e4       	ldi	r22, 0x46	; 70
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 53e:	00 00       	nop
 540:	69 e5       	ldi	r22, 0x59	; 89
 542:	85 e0       	ldi	r24, 0x05	; 5
 544:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 548:	00 00       	nop
 54a:	63 e5       	ldi	r22, 0x53	; 83
 54c:	84 e0       	ldi	r24, 0x04	; 4
 54e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 552:	00 00       	nop
 554:	64 e3       	ldi	r22, 0x34	; 52
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 55c:	00 00       	nop
 55e:	62 e3       	ldi	r22, 0x32	; 50
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 566:	00 00       	nop
 568:	64 e3       	ldi	r22, 0x34	; 52
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 570:	00 00       	nop
 572:	60 e3       	ldi	r22, 0x30	; 48
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 57a:	00 00       	nop
 57c:	00 00       	nop
 57e:	6b e1       	ldi	r22, 0x1B	; 27
 580:	72 e2       	ldi	r23, 0x22	; 34
 582:	82 e6       	ldi	r24, 0x62	; 98
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 76 03 	call	0x6ec	; 0x6ec <lcd_write_int>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 2e 04 	call	0x85c	; 0x85c <lcd_backlight>
 592:	0e 94 96 01 	call	0x32c	; 0x32c <getButtonInput>
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	0e 94 75 01 	call	0x2ea	; 0x2ea <put_on_leds>
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	80 95       	com	r24
 5a6:	90 95       	com	r25
 5a8:	8f 70       	andi	r24, 0x0F	; 15
 5aa:	99 27       	eor	r25, r25
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	91 05       	cpc	r25, r1
 5b0:	a9 f0       	breq	.+42     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	91 05       	cpc	r25, r1
 5b6:	1c f4       	brge	.+6      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	39 f0       	breq	.+14     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5bc:	3c c0       	rjmp	.+120    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	91 05       	cpc	r25, r1
 5c2:	a1 f1       	breq	.+104    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 5c4:	08 97       	sbiw	r24, 0x08	; 8
 5c6:	a1 f1       	breq	.+104    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 5c8:	36 c0       	rjmp	.+108    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 5ca:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
 5ce:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__data_start+0x1>
 5d2:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <__data_start+0x2>
 5d6:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <__data_start+0x3>
 5da:	2d c0       	rjmp	.+90     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 5dc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 5e0:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 5e4:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_start+0x2>
 5e8:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_start+0x3>
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	a1 09       	sbc	r26, r1
 5f0:	b1 09       	sbc	r27, r1
 5f2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 5f6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 5fa:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
 5fe:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
 602:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 606:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 60a:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_start+0x2>
 60e:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_start+0x3>
 612:	45 97       	sbiw	r24, 0x15	; 21
 614:	a1 05       	cpc	r26, r1
 616:	b1 05       	cpc	r27, r1
 618:	68 f0       	brcs	.+26     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 61a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
 61e:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__data_start+0x1>
 622:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <__data_start+0x2>
 626:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <__data_start+0x3>
 62a:	04 c0       	rjmp	.+8      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 62c:	00 00       	nop
 62e:	03 c0       	rjmp	.+6      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 630:	00 00       	nop
 632:	01 c0       	rjmp	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 634:	00 00       	nop
 636:	00 00       	nop
 638:	0e 94 96 01 	call	0x32c	; 0x32c <getButtonInput>
 63c:	98 2f       	mov	r25, r24
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	98 17       	cp	r25, r24
 642:	d1 f3       	breq	.-12     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 644:	a6 cf       	rjmp	.-180    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>

00000646 <lcd_enable_blink>:
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	1f 92       	push	r1
 64c:	1f 92       	push	r1
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	89 83       	std	Y+1, r24	; 0x01
 654:	9a 83       	std	Y+2, r25	; 0x02
 656:	89 81       	ldd	r24, Y+1	; 0x01
 658:	9a 81       	ldd	r25, Y+2	; 0x02
 65a:	89 2b       	or	r24, r25
 65c:	51 f0       	breq	.+20     	; 0x672 <lcd_enable_blink+0x2c>
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	9d e0       	ldi	r25, 0x0D	; 13
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	3d e0       	ldi	r19, 0x0D	; 13
 666:	f9 01       	movw	r30, r18
 668:	25 81       	ldd	r18, Z+5	; 0x05
 66a:	28 60       	ori	r18, 0x08	; 8
 66c:	fc 01       	movw	r30, r24
 66e:	25 83       	std	Z+5, r18	; 0x05
 670:	09 c0       	rjmp	.+18     	; 0x684 <lcd_enable_blink+0x3e>
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	9d e0       	ldi	r25, 0x0D	; 13
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	3d e0       	ldi	r19, 0x0D	; 13
 67a:	f9 01       	movw	r30, r18
 67c:	25 81       	ldd	r18, Z+5	; 0x05
 67e:	27 7f       	andi	r18, 0xF7	; 247
 680:	fc 01       	movw	r30, r24
 682:	25 83       	std	Z+5, r18	; 0x05
 684:	00 00       	nop
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <lcd_set_blink>:
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	1f 92       	push	r1
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	89 83       	std	Y+1, r24	; 0x01
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	9d e0       	ldi	r25, 0x0D	; 13
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	3d e0       	ldi	r19, 0x0D	; 13
 6a4:	f9 01       	movw	r30, r18
 6a6:	25 81       	ldd	r18, Z+5	; 0x05
 6a8:	2c 7f       	andi	r18, 0xFC	; 252
 6aa:	fc 01       	movw	r30, r24
 6ac:	25 83       	std	Z+5, r18	; 0x05
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	9d e0       	ldi	r25, 0x0D	; 13
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	3d e0       	ldi	r19, 0x0D	; 13
 6b6:	f9 01       	movw	r30, r18
 6b8:	35 81       	ldd	r19, Z+5	; 0x05
 6ba:	29 81       	ldd	r18, Y+1	; 0x01
 6bc:	23 2b       	or	r18, r19
 6be:	fc 01       	movw	r30, r24
 6c0:	25 83       	std	Z+5, r18	; 0x05
 6c2:	00 00       	nop
 6c4:	0f 90       	pop	r0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <lcd_write_char>:

void lcd_write_char(const uint8_t data) 
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	1f 92       	push	r1
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	89 83       	std	Y+1, r24	; 0x01
	/**/
	LCD.CTRLH = (data);
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	9d e0       	ldi	r25, 0x0D	; 13
 6dc:	29 81       	ldd	r18, Y+1	; 0x01
 6de:	fc 01       	movw	r30, r24
 6e0:	21 87       	std	Z+9, r18	; 0x09

}
 6e2:	00 00       	nop
 6e4:	0f 90       	pop	r0
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <lcd_write_int>:

void lcd_write_int(long i) 
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	2f 97       	sbiw	r28, 0x0f	; 15
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	6c 87       	std	Y+12, r22	; 0x0c
 6fc:	7d 87       	std	Y+13, r23	; 0x0d
 6fe:	8e 87       	std	Y+14, r24	; 0x0e
 700:	9f 87       	std	Y+15, r25	; 0x0f
	/**/

	if(i<=9999999){
 702:	8c 85       	ldd	r24, Y+12	; 0x0c
 704:	9d 85       	ldd	r25, Y+13	; 0x0d
 706:	ae 85       	ldd	r26, Y+14	; 0x0e
 708:	bf 85       	ldd	r27, Y+15	; 0x0f
 70a:	80 38       	cpi	r24, 0x80	; 128
 70c:	96 49       	sbci	r25, 0x96	; 150
 70e:	a8 49       	sbci	r26, 0x98	; 152
 710:	b1 05       	cpc	r27, r1
 712:	0c f0       	brlt	.+2      	; 0x716 <lcd_write_int+0x2a>
 714:	42 c0       	rjmp	.+132    	; 0x79a <lcd_write_int+0xae>
	
		asm("nop");
 716:	00 00       	nop
		char buff[7] ;
		ltoa ((long)i, buff, 10);
 718:	ae 01       	movw	r20, r28
 71a:	4b 5f       	subi	r20, 0xFB	; 251
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	8c 85       	ldd	r24, Y+12	; 0x0c
 720:	9d 85       	ldd	r25, Y+13	; 0x0d
 722:	ae 85       	ldd	r26, Y+14	; 0x0e
 724:	bf 85       	ldd	r27, Y+15	; 0x0f
 726:	2a e0       	ldi	r18, 0x0A	; 10
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	bc 01       	movw	r22, r24
 72c:	cd 01       	movw	r24, r26
 72e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ltoa>
		int len = strlen(buff);
 732:	ce 01       	movw	r24, r28
 734:	05 96       	adiw	r24, 0x05	; 5
 736:	0e 94 9d 05 	call	0xb3a	; 0xb3a <strlen>
 73a:	8b 83       	std	Y+3, r24	; 0x03
 73c:	9c 83       	std	Y+4, r25	; 0x04
			}	
		}
#elif (USE_LCD_14SEG_NUM_ORIENTATION_RIGHT == 1)		
	
//RIGHT ORIENTED
	for(int c=6;c>=0;c--){
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	9a 83       	std	Y+2, r25	; 0x02
 746:	25 c0       	rjmp	.+74     	; 0x792 <lcd_write_int+0xa6>
		
		if(c>len){
 748:	29 81       	ldd	r18, Y+1	; 0x01
 74a:	3a 81       	ldd	r19, Y+2	; 0x02
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	9c 81       	ldd	r25, Y+4	; 0x04
 750:	82 17       	cp	r24, r18
 752:	93 07       	cpc	r25, r19
 754:	2c f4       	brge	.+10     	; 0x760 <lcd_write_int+0x74>
			lcd_write_14seg(c, 0);
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <lcd_write_int+0x9c>
		}
		else{
			lcd_write_14seg(c, buff[len-c-1]);
 760:	2b 81       	ldd	r18, Y+3	; 0x03
 762:	3c 81       	ldd	r19, Y+4	; 0x04
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	9a 81       	ldd	r25, Y+2	; 0x02
 768:	a9 01       	movw	r20, r18
 76a:	48 1b       	sub	r20, r24
 76c:	59 0b       	sbc	r21, r25
 76e:	ca 01       	movw	r24, r20
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	9e 01       	movw	r18, r28
 774:	2b 5f       	subi	r18, 0xFB	; 251
 776:	3f 4f       	sbci	r19, 0xFF	; 255
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	fc 01       	movw	r30, r24
 77e:	90 81       	ld	r25, Z
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	69 2f       	mov	r22, r25
 784:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_write_14seg>
			}	
		}
#elif (USE_LCD_14SEG_NUM_ORIENTATION_RIGHT == 1)		
	
//RIGHT ORIENTED
	for(int c=6;c>=0;c--){
 788:	89 81       	ldd	r24, Y+1	; 0x01
 78a:	9a 81       	ldd	r25, Y+2	; 0x02
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	9a 83       	std	Y+2, r25	; 0x02
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	9a 81       	ldd	r25, Y+2	; 0x02
 796:	99 23       	and	r25, r25
 798:	bc f6       	brge	.-82     	; 0x748 <lcd_write_int+0x5c>
	

	
	
	
}
 79a:	00 00       	nop
 79c:	2f 96       	adiw	r28, 0x0f	; 15
 79e:	cd bf       	out	0x3d, r28	; 61
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <init_lcd>:


void init_lcd(void)
{
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
	/**/


	//enable the lcd and the segments
	LCD.CTRLA = LCD_ENABLE_bm | LCD_SEGON_bm;
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	9d e0       	ldi	r25, 0x0D	; 13
 7b4:	22 e8       	ldi	r18, 0x82	; 130
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
	
	//enable the prescale (N=16) , set the clock division to /2 leading to 62.5Hz (page 312 of xmega datasheet)
	//also enable low power waveform (will test later if needed or not)
	LCD.CTRLB = LCD_PRESC_bm | LCD_CLKDIV1_bm |LCD_CLKDIV0_bm | LCD_LPWAV_bm;
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	9d e0       	ldi	r25, 0x0D	; 13
 7be:	28 eb       	ldi	r18, 0xB8	; 184
 7c0:	fc 01       	movw	r30, r24
 7c2:	21 83       	std	Z+1, r18	; 0x01
	
	//LCD port mask value. (NEEDS FURTHER INVESTIGATION) (page 313)
	LCD.CTRLC = 0x28;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	9d e0       	ldi	r25, 0x0D	; 13
 7c8:	28 e2       	ldi	r18, 0x28	; 40
 7ca:	fc 01       	movw	r30, r24
 7cc:	22 83       	std	Z+2, r18	; 0x02
	
	//fine contrast value. Vlcd = 3V + FCONT x 0.016V).  set to max
	LCD.CTRLF = 0x3F;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	9d e0       	ldi	r25, 0x0D	; 13
 7d2:	2f e3       	ldi	r18, 0x3F	; 63
 7d4:	fc 01       	movw	r30, r24
 7d6:	27 83       	std	Z+7, r18	; 0x07
	
	//setting LCD backlight pin as output
	PORTE.DIRSET = PIN5_bm;
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	96 e0       	ldi	r25, 0x06	; 6
 7dc:	20 e2       	ldi	r18, 0x20	; 32
 7de:	fc 01       	movw	r30, r24
 7e0:	21 83       	std	Z+1, r18	; 0x01

	
	

}
 7e2:	00 00       	nop
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <init_lcd_interrupts>:
/* initialize the lcd interrupt 
 *	initialize the lcd interrupt by setting its interrupt level and also setting the interrupt callback
 */
void init_lcd_interrupts(void){
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
	
	//set the lcd interrupt at High level
	CCPWrite(&LCD.INTCTRL,32<<3 | LCD_FCINTLVL_HI_gc );
 7f2:	63 e0       	ldi	r22, 0x03	; 3
 7f4:	83 e0       	ldi	r24, 0x03	; 3
 7f6:	9d e0       	ldi	r25, 0x0D	; 13
 7f8:	0e 94 1e 01 	call	0x23c	; 0x23c <CCPWrite>
	
	//set the pointer 'intCallbackFunction' for callback to the function 'lcd_callback_lab2'
	set_lcd_callback(lcd_callback_lab2);
 7fc:	86 e0       	ldi	r24, 0x06	; 6
 7fe:	94 e0       	ldi	r25, 0x04	; 4
 800:	0e 94 1a 04 	call	0x834	; 0x834 <set_lcd_callback>
}
 804:	00 00       	nop
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <lcd_callback_lab2>:

/*
 *	the actual interrupt calllback function that is called from the IR
 */
void lcd_callback_lab2(void)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62

	lcd_write_int(counter); 
 814:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 818:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 81c:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_start+0x2>
 820:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_start+0x3>
 824:	bc 01       	movw	r22, r24
 826:	cd 01       	movw	r24, r26
 828:	0e 94 76 03 	call	0x6ec	; 0x6ec <lcd_write_int>
	
}
 82c:	00 00       	nop
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <set_lcd_callback>:


/* set the callback function to the pointer
 *	@param pointer2Func this parameter is the address of the function that is to be called inside the ISR
 */
void set_lcd_callback(void *pointer2Func){
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	1f 92       	push	r1
 83a:	1f 92       	push	r1
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	89 83       	std	Y+1, r24	; 0x01
 842:	9a 83       	std	Y+2, r25	; 0x02
	
	intCallbackFunction = pointer2Func;
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	9a 81       	ldd	r25, Y+2	; 0x02
 848:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
 84c:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <__data_end+0x1>

}
 850:	00 00       	nop
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	08 95       	ret

0000085c <lcd_backlight>:


void lcd_backlight(int status){
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	1f 92       	push	r1
 862:	1f 92       	push	r1
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	89 83       	std	Y+1, r24	; 0x01
 86a:	9a 83       	std	Y+2, r25	; 0x02
	if(status == 0){
 86c:	89 81       	ldd	r24, Y+1	; 0x01
 86e:	9a 81       	ldd	r25, Y+2	; 0x02
 870:	89 2b       	or	r24, r25
 872:	31 f4       	brne	.+12     	; 0x880 <lcd_backlight+0x24>
		PORTE.OUTCLR = PIN5_bm;
 874:	80 e8       	ldi	r24, 0x80	; 128
 876:	96 e0       	ldi	r25, 0x06	; 6
 878:	20 e2       	ldi	r18, 0x20	; 32
 87a:	fc 01       	movw	r30, r24
 87c:	26 83       	std	Z+6, r18	; 0x06
	}
	else{
		PORTE.OUTSET = PIN5_bm;
	}
	
}
 87e:	05 c0       	rjmp	.+10     	; 0x88a <lcd_backlight+0x2e>
void lcd_backlight(int status){
	if(status == 0){
		PORTE.OUTCLR = PIN5_bm;
	}
	else{
		PORTE.OUTSET = PIN5_bm;
 880:	80 e8       	ldi	r24, 0x80	; 128
 882:	96 e0       	ldi	r25, 0x06	; 6
 884:	20 e2       	ldi	r18, 0x20	; 32
 886:	fc 01       	movw	r30, r24
 888:	25 83       	std	Z+5, r18	; 0x05
	}
	
}
 88a:	00 00       	nop
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <__vector_35>:


/* LCD interrupt function
 *	This is the interrupt vector function identified by the avr tool-chain for the LCD interrupt
 */
ISR(LCD_INT_vect){
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 8a6:	0f 92       	push	r0
 8a8:	2f 93       	push	r18
 8aa:	3f 93       	push	r19
 8ac:	4f 93       	push	r20
 8ae:	5f 93       	push	r21
 8b0:	6f 93       	push	r22
 8b2:	7f 93       	push	r23
 8b4:	8f 93       	push	r24
 8b6:	9f 93       	push	r25
 8b8:	af 93       	push	r26
 8ba:	bf 93       	push	r27
 8bc:	ef 93       	push	r30
 8be:	ff 93       	push	r31
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
	
	//callback to the interrupt function 'set_lcd_callback' via the pointer 'intCallbackFunction'
	intCallbackFunction();
 8c8:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 8cc:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
 8d0:	fc 01       	movw	r30, r24
 8d2:	19 95       	eicall
	

}
 8d4:	00 00       	nop
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	ff 91       	pop	r31
 8dc:	ef 91       	pop	r30
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 8f8:	0f 90       	pop	r0
 8fa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <__cmpsf2>:
 904:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_cmp>
 908:	08 f4       	brcc	.+2      	; 0x90c <__cmpsf2+0x8>
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret

0000090e <__fixunssfsi>:
 90e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_splitA>
 912:	88 f0       	brcs	.+34     	; 0x936 <__fixunssfsi+0x28>
 914:	9f 57       	subi	r25, 0x7F	; 127
 916:	98 f0       	brcs	.+38     	; 0x93e <__fixunssfsi+0x30>
 918:	b9 2f       	mov	r27, r25
 91a:	99 27       	eor	r25, r25
 91c:	b7 51       	subi	r27, 0x17	; 23
 91e:	b0 f0       	brcs	.+44     	; 0x94c <__fixunssfsi+0x3e>
 920:	e1 f0       	breq	.+56     	; 0x95a <__fixunssfsi+0x4c>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a f0       	brmi	.+6      	; 0x932 <__fixunssfsi+0x24>
 92c:	ba 95       	dec	r27
 92e:	c9 f7       	brne	.-14     	; 0x922 <__fixunssfsi+0x14>
 930:	14 c0       	rjmp	.+40     	; 0x95a <__fixunssfsi+0x4c>
 932:	b1 30       	cpi	r27, 0x01	; 1
 934:	91 f0       	breq	.+36     	; 0x95a <__fixunssfsi+0x4c>
 936:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_zero>
 93a:	b1 e0       	ldi	r27, 0x01	; 1
 93c:	08 95       	ret
 93e:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_zero>
 942:	67 2f       	mov	r22, r23
 944:	78 2f       	mov	r23, r24
 946:	88 27       	eor	r24, r24
 948:	b8 5f       	subi	r27, 0xF8	; 248
 94a:	39 f0       	breq	.+14     	; 0x95a <__fixunssfsi+0x4c>
 94c:	b9 3f       	cpi	r27, 0xF9	; 249
 94e:	cc f3       	brlt	.-14     	; 0x942 <__fixunssfsi+0x34>
 950:	86 95       	lsr	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b3 95       	inc	r27
 958:	d9 f7       	brne	.-10     	; 0x950 <__fixunssfsi+0x42>
 95a:	3e f4       	brtc	.+14     	; 0x96a <__fixunssfsi+0x5c>
 95c:	90 95       	com	r25
 95e:	80 95       	com	r24
 960:	70 95       	com	r23
 962:	61 95       	neg	r22
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__fp_cmp>:
 96c:	99 0f       	add	r25, r25
 96e:	00 08       	sbc	r0, r0
 970:	55 0f       	add	r21, r21
 972:	aa 0b       	sbc	r26, r26
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	fe ef       	ldi	r31, 0xFE	; 254
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	e8 07       	cpc	r30, r24
 97e:	f9 07       	cpc	r31, r25
 980:	c0 f0       	brcs	.+48     	; 0x9b2 <__fp_cmp+0x46>
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	98 f0       	brcs	.+38     	; 0x9b2 <__fp_cmp+0x46>
 98c:	62 1b       	sub	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	95 0b       	sbc	r25, r21
 994:	39 f4       	brne	.+14     	; 0x9a4 <__fp_cmp+0x38>
 996:	0a 26       	eor	r0, r26
 998:	61 f0       	breq	.+24     	; 0x9b2 <__fp_cmp+0x46>
 99a:	23 2b       	or	r18, r19
 99c:	24 2b       	or	r18, r20
 99e:	25 2b       	or	r18, r21
 9a0:	21 f4       	brne	.+8      	; 0x9aa <__fp_cmp+0x3e>
 9a2:	08 95       	ret
 9a4:	0a 26       	eor	r0, r26
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__fp_cmp+0x3e>
 9a8:	a1 40       	sbci	r26, 0x01	; 1
 9aa:	a6 95       	lsr	r26
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	81 1d       	adc	r24, r1
 9b0:	81 1d       	adc	r24, r1
 9b2:	08 95       	ret

000009b4 <__fp_split3>:
 9b4:	57 fd       	sbrc	r21, 7
 9b6:	90 58       	subi	r25, 0x80	; 128
 9b8:	44 0f       	add	r20, r20
 9ba:	55 1f       	adc	r21, r21
 9bc:	59 f0       	breq	.+22     	; 0x9d4 <__fp_splitA+0x10>
 9be:	5f 3f       	cpi	r21, 0xFF	; 255
 9c0:	71 f0       	breq	.+28     	; 0x9de <__fp_splitA+0x1a>
 9c2:	47 95       	ror	r20

000009c4 <__fp_splitA>:
 9c4:	88 0f       	add	r24, r24
 9c6:	97 fb       	bst	r25, 7
 9c8:	99 1f       	adc	r25, r25
 9ca:	61 f0       	breq	.+24     	; 0x9e4 <__fp_splitA+0x20>
 9cc:	9f 3f       	cpi	r25, 0xFF	; 255
 9ce:	79 f0       	breq	.+30     	; 0x9ee <__fp_splitA+0x2a>
 9d0:	87 95       	ror	r24
 9d2:	08 95       	ret
 9d4:	12 16       	cp	r1, r18
 9d6:	13 06       	cpc	r1, r19
 9d8:	14 06       	cpc	r1, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	f2 cf       	rjmp	.-28     	; 0x9c2 <__fp_split3+0xe>
 9de:	46 95       	lsr	r20
 9e0:	f1 df       	rcall	.-30     	; 0x9c4 <__fp_splitA>
 9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <__fp_splitA+0x30>
 9e4:	16 16       	cp	r1, r22
 9e6:	17 06       	cpc	r1, r23
 9e8:	18 06       	cpc	r1, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	f1 cf       	rjmp	.-30     	; 0x9d0 <__fp_splitA+0xc>
 9ee:	86 95       	lsr	r24
 9f0:	71 05       	cpc	r23, r1
 9f2:	61 05       	cpc	r22, r1
 9f4:	08 94       	sec
 9f6:	08 95       	ret

000009f8 <__fp_zero>:
 9f8:	e8 94       	clt

000009fa <__fp_szero>:
 9fa:	bb 27       	eor	r27, r27
 9fc:	66 27       	eor	r22, r22
 9fe:	77 27       	eor	r23, r23
 a00:	cb 01       	movw	r24, r22
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret

00000a06 <__gesf2>:
 a06:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_cmp>
 a0a:	08 f4       	brcc	.+2      	; 0xa0e <__gesf2+0x8>
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__mulsf3>:
 a10:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3x>
 a14:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_round>
 a18:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscA>
 a1c:	38 f0       	brcs	.+14     	; 0xa2c <__mulsf3+0x1c>
 a1e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscB>
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__mulsf3+0x1c>
 a24:	95 23       	and	r25, r21
 a26:	11 f0       	breq	.+4      	; 0xa2c <__mulsf3+0x1c>
 a28:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_inf>
 a2c:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_nan>
 a30:	11 24       	eor	r1, r1
 a32:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_szero>

00000a36 <__mulsf3x>:
 a36:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fp_split3>
 a3a:	70 f3       	brcs	.-36     	; 0xa18 <__mulsf3+0x8>

00000a3c <__mulsf3_pse>:
 a3c:	95 9f       	mul	r25, r21
 a3e:	c1 f3       	breq	.-16     	; 0xa30 <__mulsf3+0x20>
 a40:	95 0f       	add	r25, r21
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	55 1f       	adc	r21, r21
 a46:	62 9f       	mul	r22, r18
 a48:	f0 01       	movw	r30, r0
 a4a:	72 9f       	mul	r23, r18
 a4c:	bb 27       	eor	r27, r27
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	63 9f       	mul	r22, r19
 a54:	aa 27       	eor	r26, r26
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	aa 1f       	adc	r26, r26
 a5c:	64 9f       	mul	r22, r20
 a5e:	66 27       	eor	r22, r22
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	66 1f       	adc	r22, r22
 a66:	82 9f       	mul	r24, r18
 a68:	22 27       	eor	r18, r18
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	73 9f       	mul	r23, r19
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	83 9f       	mul	r24, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	22 1f       	adc	r18, r18
 a80:	74 9f       	mul	r23, r20
 a82:	33 27       	eor	r19, r19
 a84:	a0 0d       	add	r26, r0
 a86:	61 1d       	adc	r22, r1
 a88:	23 1f       	adc	r18, r19
 a8a:	84 9f       	mul	r24, r20
 a8c:	60 0d       	add	r22, r0
 a8e:	21 1d       	adc	r18, r1
 a90:	82 2f       	mov	r24, r18
 a92:	76 2f       	mov	r23, r22
 a94:	6a 2f       	mov	r22, r26
 a96:	11 24       	eor	r1, r1
 a98:	9f 57       	subi	r25, 0x7F	; 127
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	9a f0       	brmi	.+38     	; 0xac4 <__mulsf3_pse+0x88>
 a9e:	f1 f0       	breq	.+60     	; 0xadc <__mulsf3_pse+0xa0>
 aa0:	88 23       	and	r24, r24
 aa2:	4a f0       	brmi	.+18     	; 0xab6 <__mulsf3_pse+0x7a>
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	bb 1f       	adc	r27, r27
 aaa:	66 1f       	adc	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	91 50       	subi	r25, 0x01	; 1
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	a9 f7       	brne	.-22     	; 0xaa0 <__mulsf3_pse+0x64>
 ab6:	9e 3f       	cpi	r25, 0xFE	; 254
 ab8:	51 05       	cpc	r21, r1
 aba:	80 f0       	brcs	.+32     	; 0xadc <__mulsf3_pse+0xa0>
 abc:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_inf>
 ac0:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_szero>
 ac4:	5f 3f       	cpi	r21, 0xFF	; 255
 ac6:	e4 f3       	brlt	.-8      	; 0xac0 <__mulsf3_pse+0x84>
 ac8:	98 3e       	cpi	r25, 0xE8	; 232
 aca:	d4 f3       	brlt	.-12     	; 0xac0 <__mulsf3_pse+0x84>
 acc:	86 95       	lsr	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	b7 95       	ror	r27
 ad4:	f7 95       	ror	r31
 ad6:	e7 95       	ror	r30
 ad8:	9f 5f       	subi	r25, 0xFF	; 255
 ada:	c1 f7       	brne	.-16     	; 0xacc <__mulsf3_pse+0x90>
 adc:	fe 2b       	or	r31, r30
 ade:	88 0f       	add	r24, r24
 ae0:	91 1d       	adc	r25, r1
 ae2:	96 95       	lsr	r25
 ae4:	87 95       	ror	r24
 ae6:	97 f9       	bld	r25, 7
 ae8:	08 95       	ret

00000aea <__fp_inf>:
 aea:	97 f9       	bld	r25, 7
 aec:	9f 67       	ori	r25, 0x7F	; 127
 aee:	80 e8       	ldi	r24, 0x80	; 128
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	08 95       	ret

00000af6 <__fp_nan>:
 af6:	9f ef       	ldi	r25, 0xFF	; 255
 af8:	80 ec       	ldi	r24, 0xC0	; 192
 afa:	08 95       	ret

00000afc <__fp_pscA>:
 afc:	00 24       	eor	r0, r0
 afe:	0a 94       	dec	r0
 b00:	16 16       	cp	r1, r22
 b02:	17 06       	cpc	r1, r23
 b04:	18 06       	cpc	r1, r24
 b06:	09 06       	cpc	r0, r25
 b08:	08 95       	ret

00000b0a <__fp_pscB>:
 b0a:	00 24       	eor	r0, r0
 b0c:	0a 94       	dec	r0
 b0e:	12 16       	cp	r1, r18
 b10:	13 06       	cpc	r1, r19
 b12:	14 06       	cpc	r1, r20
 b14:	05 06       	cpc	r0, r21
 b16:	08 95       	ret

00000b18 <__fp_round>:
 b18:	09 2e       	mov	r0, r25
 b1a:	03 94       	inc	r0
 b1c:	00 0c       	add	r0, r0
 b1e:	11 f4       	brne	.+4      	; 0xb24 <__fp_round+0xc>
 b20:	88 23       	and	r24, r24
 b22:	52 f0       	brmi	.+20     	; 0xb38 <__fp_round+0x20>
 b24:	bb 0f       	add	r27, r27
 b26:	40 f4       	brcc	.+16     	; 0xb38 <__fp_round+0x20>
 b28:	bf 2b       	or	r27, r31
 b2a:	11 f4       	brne	.+4      	; 0xb30 <__fp_round+0x18>
 b2c:	60 ff       	sbrs	r22, 0
 b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__fp_round+0x20>
 b30:	6f 5f       	subi	r22, 0xFF	; 255
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	08 95       	ret

00000b3a <strlen>:
 b3a:	fc 01       	movw	r30, r24
 b3c:	01 90       	ld	r0, Z+
 b3e:	00 20       	and	r0, r0
 b40:	e9 f7       	brne	.-6      	; 0xb3c <strlen+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <ltoa>:
 b4c:	25 32       	cpi	r18, 0x25	; 37
 b4e:	31 05       	cpc	r19, r1
 b50:	20 f4       	brcc	.+8      	; 0xb5a <ltoa+0xe>
 b52:	22 30       	cpi	r18, 0x02	; 2
 b54:	10 f0       	brcs	.+4      	; 0xb5a <ltoa+0xe>
 b56:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__ltoa_ncheck>
 b5a:	fa 01       	movw	r30, r20
 b5c:	10 82       	st	Z, r1
 b5e:	ca 01       	movw	r24, r20
 b60:	08 95       	ret

00000b62 <__ltoa_ncheck>:
 b62:	bb 27       	eor	r27, r27
 b64:	2a 30       	cpi	r18, 0x0A	; 10
 b66:	51 f4       	brne	.+20     	; 0xb7c <__ltoa_ncheck+0x1a>
 b68:	99 23       	and	r25, r25
 b6a:	42 f4       	brpl	.+16     	; 0xb7c <__ltoa_ncheck+0x1a>
 b6c:	bd e2       	ldi	r27, 0x2D	; 45
 b6e:	90 95       	com	r25
 b70:	80 95       	com	r24
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__ultoa_common>

00000b80 <__ultoa_ncheck>:
 b80:	bb 27       	eor	r27, r27

00000b82 <__ultoa_common>:
 b82:	fa 01       	movw	r30, r20
 b84:	a6 2f       	mov	r26, r22
 b86:	62 17       	cp	r22, r18
 b88:	71 05       	cpc	r23, r1
 b8a:	81 05       	cpc	r24, r1
 b8c:	91 05       	cpc	r25, r1
 b8e:	33 0b       	sbc	r19, r19
 b90:	30 fb       	bst	r19, 0
 b92:	66 f0       	brts	.+24     	; 0xbac <__ultoa_common+0x2a>
 b94:	aa 27       	eor	r26, r26
 b96:	66 0f       	add	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	aa 1f       	adc	r26, r26
 ba0:	a2 17       	cp	r26, r18
 ba2:	10 f0       	brcs	.+4      	; 0xba8 <__ultoa_common+0x26>
 ba4:	a2 1b       	sub	r26, r18
 ba6:	63 95       	inc	r22
 ba8:	38 50       	subi	r19, 0x08	; 8
 baa:	a9 f7       	brne	.-22     	; 0xb96 <__ultoa_common+0x14>
 bac:	a0 5d       	subi	r26, 0xD0	; 208
 bae:	aa 33       	cpi	r26, 0x3A	; 58
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__ultoa_common+0x32>
 bb2:	a9 5d       	subi	r26, 0xD9	; 217
 bb4:	a1 93       	st	Z+, r26
 bb6:	36 f7       	brtc	.-52     	; 0xb84 <__ultoa_common+0x2>
 bb8:	b1 11       	cpse	r27, r1
 bba:	b1 93       	st	Z+, r27
 bbc:	10 82       	st	Z, r1
 bbe:	ca 01       	movw	r24, r20
 bc0:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <strrev>

00000bc4 <strrev>:
 bc4:	dc 01       	movw	r26, r24
 bc6:	fc 01       	movw	r30, r24
 bc8:	67 2f       	mov	r22, r23
 bca:	71 91       	ld	r23, Z+
 bcc:	77 23       	and	r23, r23
 bce:	e1 f7       	brne	.-8      	; 0xbc8 <strrev+0x4>
 bd0:	32 97       	sbiw	r30, 0x02	; 2
 bd2:	04 c0       	rjmp	.+8      	; 0xbdc <strrev+0x18>
 bd4:	7c 91       	ld	r23, X
 bd6:	6d 93       	st	X+, r22
 bd8:	70 83       	st	Z, r23
 bda:	62 91       	ld	r22, -Z
 bdc:	ae 17       	cp	r26, r30
 bde:	bf 07       	cpc	r27, r31
 be0:	c8 f3       	brcs	.-14     	; 0xbd4 <strrev+0x10>
 be2:	08 95       	ret

00000be4 <_exit>:
 be4:	f8 94       	cli

00000be6 <__stop_program>:
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <__stop_program>
